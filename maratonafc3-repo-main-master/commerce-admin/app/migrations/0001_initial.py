# Generated by Django 3.0.6 on 2020-06-29 16:43

import app.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('tenant', '0001_initial'),
        ('my_admin', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='nome')),
                ('slug', models.SlugField()),
                ('tenant', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='category_tenants', to='tenant.Tenant', verbose_name='tenant')),
            ],
            options={
                'verbose_name': 'categoria',
            },
        ),
        migrations.CreateModel(
            name='Checkout',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('installments', models.SmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='número de parcelas')),
                ('bank_slip_url', models.URLField(null=True)),
                ('status', models.PositiveSmallIntegerField(default=1)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='nome')),
                ('email', models.CharField(max_length=255, verbose_name='e-mail')),
                ('personal_document', models.CharField(max_length=20, verbose_name='cpf')),
                ('tenant', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='customer_tenants', to='tenant.Tenant', verbose_name='tenant')),
            ],
            options={
                'verbose_name': 'cliente',
            },
        ),
        migrations.CreateModel(
            name='PaymentGateway',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='nome')),
                ('default', models.BooleanField(default=False, verbose_name='principal')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_app.paymentgateway_set+', to='contenttypes.ContentType')),
                ('tenant', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='paymentgateway_tenants', to='tenant.Tenant', verbose_name='tenant')),
            ],
            options={
                'verbose_name': 'gateway de pagamento',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='nome')),
                ('description', models.TextField()),
                ('slug', models.SlugField()),
                ('sale_price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='preço de venda')),
                ('purchase_price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='preço de compra')),
                ('featured', models.BooleanField(default=False, verbose_name='destaque')),
                ('image', models.ImageField(max_length=255, upload_to=app.models.upload_to)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.Category', verbose_name='categorias')),
                ('tenant', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='product_tenants', to='tenant.Tenant', verbose_name='tenant')),
            ],
            options={
                'verbose_name': 'produto',
            },
        ),
        migrations.CreateModel(
            name='PagarmeGateway',
            fields=[
                ('paymentgateway_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.PaymentGateway')),
                ('api_key', models.CharField(max_length=255)),
                ('encryption_key', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Pagar.me',
                'verbose_name_plural': 'Pagar.me',
            },
            bases=('app.paymentgateway',),
        ),
        migrations.CreateModel(
            name='CustomerAddress',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('zip_code', models.CharField(max_length=15, verbose_name='cep')),
                ('street', models.CharField(max_length=255, verbose_name='endereço')),
                ('street_number', models.CharField(max_length=10, verbose_name='número')),
                ('street_2', models.CharField(max_length=255, null=True, verbose_name='complemento')),
                ('neighborhood', models.CharField(max_length=255, verbose_name='bairro')),
                ('city', models.CharField(max_length=255, verbose_name='cidade')),
                ('state', models.CharField(max_length=255, verbose_name='estado')),
                ('ddd1', models.CharField(max_length=2, verbose_name='ddd')),
                ('phone1', models.CharField(max_length=255, verbose_name='telefone')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.Customer')),
                ('tenant', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='customeraddress_tenants', to='tenant.Tenant', verbose_name='tenant')),
            ],
            options={
                'verbose_name': 'endereço',
            },
        ),
        migrations.CreateModel(
            name='CheckoutItem',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.PositiveSmallIntegerField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='preço')),
                ('checkout', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='checkout_items', to='app.Checkout')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.Product')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='checkout',
            name='customer_address',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.CustomerAddress'),
        ),
        migrations.AddField(
            model_name='checkout',
            name='payment_method',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='my_admin.PaymentMethod'),
        ),
        migrations.AddField(
            model_name='checkout',
            name='tenant',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='checkout_tenants', to='tenant.Tenant', verbose_name='tenant'),
        ),
        migrations.CreateModel(
            name='ProductPaymentMethod',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('max_installments', models.SmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='número de parcelas máximo')),
                ('max_installments_discount', models.SmallIntegerField(blank=True, help_text='Máximo de parcelas com desconto', null=True, verbose_name='desconto em parcela')),
                ('discount_percentage', models.PositiveSmallIntegerField(blank=True, help_text='Desconto em %', null=True, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='desconto')),
                ('payment_method', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='my_admin.PaymentMethod', verbose_name='método de pagamento')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.Product', verbose_name='produto')),
            ],
            options={
                'verbose_name': 'métodos de pagamento',
                'unique_together': {('product_id', 'payment_method_id')},
            },
        ),
        migrations.CreateModel(
            name='PaymentMethodConfig',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('max_installments', models.SmallIntegerField(blank=True, help_text='Se não permitir parcelamento, deixe como 0', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='parcelamento')),
                ('discount_percentage', models.PositiveSmallIntegerField(blank=True, help_text='Desconto em % (se não tiver, deixe como 0)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='desconto')),
                ('payment_method', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='my_admin.PaymentMethod', verbose_name='método de pagamento')),
                ('tenant', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='paymentmethodconfig_tenants', to='tenant.Tenant', verbose_name='tenant')),
            ],
            options={
                'verbose_name': 'configuração de métodos de pagamento',
                'unique_together': {('payment_method_id', 'tenant_id')},
            },
        ),
    ]
